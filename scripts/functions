#!/bin/bash

if [ -z "${IOS_SOURCED_FUNCTIONS}" ]
then
	IOS_SOURCED_FUNCTIONS=1

	function ios_msg() {
		echo $@ ${text_reset}
	}

	function ios_restore_current_dir() {
		cd "${IOS_CURRENT_DIR}"
	}

	function ios_exit_with_msg() {
		ios_msg ${text_bold}${text_red}ERROR: ${text_reset}$@
		ios_restore_current_dir
		exit 1
	}

	function ios_check_license() {
		LICENSE="${LICENSE:-OK}"
		case "$LICENSE" in
		LGPL)
			if [ -z "${LGPL+defined}" ]
			then
				ios_exit_with_msg "${text_bold}${IOS_PACKAGE_WITH_VERSION}${text_reset} is LGPL, which means it cannot be statically linked. To build it anyway, add \"${text_bold}LGPL${text_reset}\" to your command line parameters."
			fi
			;;
		*) true
			;;
		esac
	}

	function ios_sign_library() {
		local x_lib_path="$1"; shift
		local ifs=$IFS
		local x_sig=(
			"PACKAGE=${IOS_PACKAGE_WITH_VERSION}"
			"COMMIT_ID=${IOS_LAST_COMMIT_ID}"
			"FETCH_URL=\"${IOS_FETCH_URL:-local}\""
		)

		echo  >__ios_signature.c 'extern const char* const __ios_signature'$$';' && \
		echo >>__ios_signature.c 'const char* const __ios_signature'$$'="\n'"\\" && \
		echo >>__ios_signature.c '# BEGIN IOS SDK OVERLAY SIGNATURE\n'"\\"       && \
		for x in ${!x_sig[@]}
		do
			local x_prop=${x_sig[$x]}
			x_prop=${x_prop//\\/\\\\}
			x_prop=${x_prop//\"/\\\"}
			echo >>__ios_signature.c ${x_prop}'\n'"\\"
		done && \
		echo >>__ios_signature.c '\n# END IOS SDK OVERLAY SIGNATURE\n";'         && \
		ios_msg "${text_green}Signing [${text_reset}$x_lib_path${text_green}] with the following signature:"  && \
		for x in ${!x_sig[@]}; do echo ${text_bold}${x_sig[$x]}${text_reset}; done && \
		${CC} -c ${CFLAGS} __ios_signature.c && \
		ar -r "$x_lib_path" __ios_signature.o || \
		ios_exit_with_msg "Failed to sign library ${text_bold}$x_lib_path"
		local s=$?
		IFS=$ifs
		return $s
	}

	function ios_download_file() {
		if [ ! -r "${IOS_DOWNLOAD_LOCATION}" -o ! -z "$IOS_IS_SCM" ]
		then
			rm -f "${IOS_DOWNLOAD_LOCATION}" 2>/dev/null
			ios_msg "${text_green}Downloading [${text_reset}${ARCHIVE_FILENAME}${text_green}]…"
			if type custom_download_file >/dev/null 2>&1
			then
				SPECIAL_SCHEME="${DOWNLOAD_URL%%|*}" SPECIAL_LOCATION="${DOWNLOAD_URL#*|}" custom_download_file
			else
				case "${DOWNLOAD_URL%%|*}" in
				svn)
					rm -rf "${IOS_BUILD_DIR}" >/dev/null 2>&1 || true
					svn checkout "${DOWNLOAD_URL#*|}" "${IOS_BUILD_DIR}"
					;;
				git)
					rm -rf "${IOS_BUILD_DIR}" >/dev/null 2>&1 || true
					git clone "${DOWNLOAD_URL#*|}" "${IOS_BUILD_DIR}"
					;;
				*)
					wget -ct0 "$DOWNLOAD_URL" -O "${IOS_DOWNLOAD_LOCATION}"
					;;
				esac
			fi
		fi || ios_exit_with_msg "Failed to download ${text_bold}${DOWNLOAD_URL}"
	}

	function ios_uncompress() {
		if [ -z "$IOS_IS_SCM" ]
		then
			ios_msg "${text_green}Uncompressing [${text_reset}${ARCHIVE_FILENAME}${text_green}] into [${text_reset}${IOS_BUILD_DIR}${text_green}]…"
			rm -rf "${IOS_BUILD_DIR}" 2>/dev/null
			mkdir -p "${IOS_BUILD_DIR}" 2>/dev/null && \
			if type custom_uncompress >/dev/null 2>&1
			then
				custom_uncompress
			else
				local x_loc="${IOS_DOWNLOAD_LOCATION}"
				x_loc="${x_loc//.tgz/.tar.gz}"
				case "${x_loc}" in
				*.tar.gz)
					tar -xvpzC "${IOS_BUILD_DIR}" --strip-components 1 -f "${IOS_DOWNLOAD_LOCATION}"
					;;
				*.tar.bz2)
					tar -xvpjC "${IOS_BUILD_DIR}" --strip-components 1 -f "${IOS_DOWNLOAD_LOCATION}"
					;;
				*.zip)
					unzip "${IOS_DOWNLOAD_LOCATION}" -d "${IOS_BUILD_DIR}"
					;;
				*)
					ios_exit_with_msg "Unknown archive type"
					;;
				esac
			fi
		fi || ios_exit_with_msg "Failed to uncompress ${IOS_DOWNLOAD_LOCATION}"
	}

	function ios_autopatch() {
		find -s "${IOS_PACKAGE_DIR}" -maxdepth 1 -iname "${IOS_PACKAGE_WITH_VERSION}*.patch" -print0 >"${IOS_BUILD_DIR}/__ios_patches"
		while read -r -d $'\0' PATCH
		do
			ios_msg "${text_green}Applying [${text_reset}${PATCH##*/}${text_green}]…" && \
			patch -d "${IOS_BUILD_DIR}" -p1 -i "${PATCH}" || \
			ios_exit_with_msg "Failed to apply ${text_bold}${PATCH##*/}"
		done <"${IOS_BUILD_DIR}/__ios_patches" || ios_exit_with_msg "Failed to apply some patches"
	}

	function ios_build_all() {
		local PATH0="$PATH" \
		unset CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH OBJC_INCLUDE_PATH LIBS DYLD_FALLBACK_LIBRARY_PATH DYLD_FALLBACK_FRAMEWORK_PATH
		if type custom_build >/dev/null 2>&1
		then
			for SDK in iphoneos iphonesimulator
			do
				local PLATFORM=$(xcodebuild -version -sdk $SDK PlatformPath 2>/dev/null)
				local SYSROOT=$(xcodebuild -version -sdk $SDK Path 2>/dev/null)
				local SDKVER=$(xcodebuild -version -sdk $SDK ProductVersion 2>/dev/null)
				if [ -z "$PLATFORM" ] || [ -z "$SYSROOT" ] || [ -z "$SDKVER" ]
				then
					echo $PLATFORM
					echo $SYSROOT
					echo $SDKVER
					ios_exit_with_msg "Cannot find SDK: $SDK"
				fi
				local PATH="${PLATFORM}/Developer/usr/bin:/Developer/usr/bin:$PATH0"
				local PREFIX="$IOS_OVERLAY_PATH/overlay$SYSROOT/usr"
				local PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig":"$SYSROOT/usr/lib/pkgconfig"
				local PKG_CONFIG_LIBDIR="$PKG_CONFIG_PATH"
				local AS="$PLATFORM/Developer/usr/bin/as"
				local ASCPP="$AS"
				local AR="$PLATFORM/Developer/usr/bin/ar"
				local RANLIB="$PLATFORM/Developer/usr/bin/ranlib"

				local GCC_VERSION=$($PLATFORM/Developer/usr/bin/gcc --version)
				GCC_VERSION=${GCC_VERSION%% *}
				GCC_VERSION=${GCC_VERSION##*-}

				local CFLAGS="-pipe -miphoneos-version-min=$SDKVER --sysroot='$SYSROOT' -isystem $PREFIX/include -isystem $SYSROOT/usr/include -isystem $PLATFORM/usr/include -isystem $SYSROOT/usr/include/c++/$GCC_VERSION -L$PREFIX/lib -L$SYSROOT/usr/lib"

				local ARCH HOST
				case $SDK in
				iphoneos)
					ARCH=armv7
					HOST=arm-apple-darwin
					;;
				iphonesimulator)
					ARCH=i686
					HOST=i686-apple-darwin
					;;
				esac
				CFLAGS="-arch $ARCH $CFLAGS -isystem $SYSROOT/usr/lib/gcc/${HOST}10/$GCC_VERSION/include -isystem $SYSROOT/usr/include/c++/$GCC_VERSION/${ARCH}-apple-darwin10 -L$PLATFORM/Developer/usr/lib/gcc/${HOST}10/$GCC_VERSION"

				CFLAGS="-fstrict-aliasing -ftree-loop-ivcanon -fgcse-sm -fgcse-las -funsafe-loop-optimizations -fsee -fomit-frame-pointer -O3 -ffast-math -ftree-vectorize $CFLAGS"
				case $SDK in
				iphoneos)        CFLAGS="-mthumb -mcpu=cortex-a8 -mfloat-abi=softfp -mfpu=neon $CFLAGS";;
				iphonesimulator) CFLAGS="-msse2 -mfpmath=sse $CFLAGS";;
				esac
				local CPPFLAGS="$CFLAGS"
				local CXXFLAGS="$CFLAGS"
				local LDFLAGS="$CFLAGS"
				local CPP="$PLATFORM/Developer/usr/bin/gcc -E"
				local CXXCPP="$PLATFORM/Developer/usr/bin/g++ -E"
				local CC="$PLATFORM/Developer/usr/bin/gcc"
				local CXX="$PLATFORM/Developer/usr/bin/g++"
				local LD="$PLATFORM/Developer/usr/bin/ld"
				local STRIP="$PLATFORM/Developer/usr/bin/strip"
				local XCONF="./configure --prefix=${PREFIX} --host=$HOST --target=$HOST --disable-shared --enable-static"

				export ARCH HOST SDK PLATFORM SYSROOT SDKVER PATH PREFIX PKG_CONFIG_PATH PKG_CONFIG_LIBDIR \
				       AS ASCPP AR RANLIB CFLAGS CPPFLAGS CXXFLAGS LDFLAGS CPP CXXCPP CC CXX LD STRIP XCONF

				ios_msg "${text_green}Building [${text_reset}${IOS_PACKAGE_WITH_VERSION}${text_green}] for [${text_reset}${SDK} ${SDKVER}${text_green}]" && \
				cd "${IOS_BUILD_DIR}" && \
				custom_build || \
				ios_exit_with_msg "Failed to build ${text_bold}${IOS_PACKAGE_WITH_VERSION}${text_reset} for ${text_bold}${SDK} ${SDKVER}"

			done || ios_exit_with_msg "Failed to build some packages"
		fi
	}
fi

