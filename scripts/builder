#!/bin/bash

if [ -z "${IOS_SOURCED_BUILDER}" ]
then
	IOS_SOURCED_BUILDER=1

	# Save current dir so we can restore it before exiting
	IOS_CURRENT_DIR=$(pwd)

	# Determine where the package is,
	# and what's ios-overlay install dir.
	IOS_SELF="$0"
	IOS_PACKAGE_DIR=${0%/*}
	if [ -z "$IOS_PACKAGE_DIR" ]
	then
		IOS_PACKAGE_DIR="."
	fi
	cd "${IOS_PACKAGE_DIR}"
	IOS_PACKAGE_DIR=$(pwd)
	IOS_SELF="${IOS_PACKAGE_DIR}/${IOS_SELF##*/}"
	cd ../..
	IOS_OVERLAY_PATH=$(pwd)
	cd "${IOS_CURRENT_DIR}"

	# Create /iOS_SDK_Overlay link if needed
	# Warning: DO NOT *SOURCE* IT
	"${IOS_OVERLAY_PATH}/scripts/check-root-link"

	# Set the rest of the environment
	. "${IOS_OVERLAY_PATH}/scripts/set-environment"

	function ios_restore_current_dir() {
		cd "${IOS_CURRENT_DIR}"
	}

	function ios_check_status_fail() {
		if [ $? != 0 ]
		then
			echo -e $@
			ios_restore_current_dir
			exit 1
		fi
	}

	function ios_download_file() {
		SPECIAL_SCHEME="${IOS_DOWNLOAD_URL%%|*}"
		SPECIAL_LOCATION="${IOS_DOWNLOAD_URL#*|}"
		case "${SPECIAL_SCHEME}" in
			svn)
				svn checkout "${SPECIAL_LOCATION}" "${IOS_BUILD_DIR}"
				;;
			*)
				wget -ct0 "$DOWNLOAD_URL" -O "${IOS_DOWNLOAD_LOCATION}"
				;;
		esac 
		unset SPECIAL_SCHEME SPECIAL_LOCATION
	}

	function ios_uncompress() {
		rm -rf "${IOS_BUILD_DIR}" 2>/dev/null && \
		mkdir -p "${IOS_BUILD_DIR}" && \
		case "${IOS_DOWNLOAD_LOCATION}" in
			*.tar.gz)
				tar -xvpzC "${IOS_BUILD_DIR}" --strip-components 1 -f "${IOS_DOWNLOAD_LOCATION}"
				;;
			*.tar.bz2)
				tar -xvpjC "${IOS_BUILD_DIR}" --strip-components 1 -f "${IOS_DOWNLOAD_LOCATION}"
				;;
			*.zip)
				unzip "${IOS_DOWNLOAD_LOCATION}" -d "${IOS_BUILD_DIR}"
				;;
			*)
				false
				ios_check_status_fail "### Failed to uncompress [${IOS_DOWNLOAD_LOCATION}] (unknown archive type), exiting…"
				;;
		esac
	}

	echo "* Installing [${IOS_PACKAGE_WITH_VERSION}] for [iOS ${IOS_SDK}]…"
	echo "    Work directory: ${IOS_BUILD_DIR}"
	echo "    Downloading [${DOWNLOAD_URL}]…"
	if [ ! -r "${IOS_DOWNLOAD_LOCATION}" -o ! -z "$IOS_IS_SCM" ]
	then
		rm -f "${IOS_DOWNLOAD_LOCATION}" 2>/dev/null
		if type custom_download_file >/dev/null 2>&1
		then
			custom_download_file
		else
			ios_download_file
		fi
		ios_check_status_fail "### Failed to download ${DOWNLOAD_URL}, exiting…"
	fi

	if [ -z "$IOS_IS_SCM" ]
	then
		echo "    Uncompressing [${ARCHIVE_FILENAME}] into [${IOS_BUILD_DIR}]…"
		rm -rf "${IOS_BUILD_DIR}" 2>/dev/null
		mkdir -p "${IOS_BUILD_DIR}" 2>/dev/null
		if type custom_uncompress >/dev/null 2>&1
		then
			custom_uncompress
		else
			ios_uncompress
		fi
		ios_check_status_fail "### Failed to uncompress ${IOS_DOWNLOAD_LOCATION}, exiting…"
	fi

	if [ -r "${IOS_PACKAGE_DIR}/${IOS_PACKAGE_WITH_VERSION}.patch" ]
	then
		echo "    Patching [${IOS_BUILD_DIR}]…"
		patch -d "${IOS_BUILD_DIR}" -p1 -i "${IOS_PACKAGE_DIR}/${IOS_PACKAGE_WITH_VERSION}.patch"
	fi
	ios_check_status_fail "### Failed to apply patch on [${IOS_BUILD_DIR}], exiting…"

	echo "    Building…"
	cd "${IOS_BUILD_DIR}"

	if type custom_build >/dev/null 2>&1
	then
		custom_build
		ios_check_status_fail "### Failed to build ${IOS_PACKAGE_WITH_VERSION}, exiting…"
	else
		false
		ios_check_status_fail "### No custom_build() function defined in [${IOS_SELF}], exiting…"
	fi

	ios_restore_current_dir
	echo "    All done!"
fi

